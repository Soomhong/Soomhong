#include <stdio.h>
#include <stdlib.h>

//230323

/*//최대값 찾기
#define SIZE 10
 
int main(){
	int price[SIZE];
	int i, max;
	
	printf("1 2 3 4 5 6 7 8 9 0\n");
	
	srand( (unsigned)time(NULL));
	for(i=0; i<SIZE; i++){
		price[i] = (rand()%100)+1;
		printf("%-3d", price[i]);
	}
	printf("\n\n");
	
	max = price[0];
	
	for(i = 1; i < SIZE; i++){
		if(price[i] > max)
		max = price[i];
	}
	
	printf("max is %d", max);
	
	return 0;
}*/
/*//구조체 좌표 다루기 기본 
struct point{
		int x;
		int y;
};
	
struct rect{
		struct point p1;
		struct point p2;
};
int main(){
	struct rect r;
	
	int w, h, area, peri;
	
	printf("left: ");
	scanf("%d %d", &r.p1.x, &r.p1.y);
	
	printf("right: ");
	scanf("%d %d",&r.p2.x, &r.p2.y);
	
	w = r.p2.x - r.p1.x;
	h = r.p2.y - r.p1.y;
	
	area = w * h;
	peri = 2 * w + 2 * h;
	
	if(peri < 0){
		peri = peri * -1;
	}
	
	printf("area is %d period is %d", area, peri);
	
	
	
	
	
	return 0;
}*/

/*//구조체 포인터엮기 기본 
#define SIZE 20

struct date{ //생년월일 구조체 d
	int month;
	int day;
	int year;
};

struct student{ //학생 정보 구조체 s 
	int number;
	char name[SIZE];
	double grade;
	struct date *dob;
};

int main(){
	struct date d; // 생년원일 구조체 변수 d 선언 
	struct student s;//학생 정보 구조체 변수 s 선언 
	
	printf("Input dob: "); //생년월일 입력 
	scanf("%d %d %d", &d.month, &d.day, &d.year);
	
	printf("Input info.: "); // 학생정보 입력 
	scanf("%d %s %lf", &s.number, &s.name[SIZE], &s.grade);
	
	s.dob = &d; //struct student 구조체 안에 있는 포인터 dob에 str date 구조체 대입 
	
	printf("Num  : %d\n", s.number); //입력된 정보들 출력 
	printf("Name : %c\n", s.name);
	printf("Grade: %.3lf\n", s.grade);
	printf("D.O.B: %d/%d/%d\n", s.dob->month, s.dob->day, s.dob->year);
	
	return 0;
}*/
/* //이중 포인터 기본 
int main(){
	
	int i = 100; // 변수 i 초기화 
	int *p = &i; // 포인터 p = i 
	int **q = &p;// i를 가리키는 포인터p = 포인터 q 
	
	*p = 200; // 포인터 p를 200으로 초기화 -> 변수 i = 200 전달 
	printf("i = %d\n", i); // 출력 
	
	**q = 300; // q를 통해 p에 300을 전달 p가 i에 300을 전달 
	printf("i = %d\n", i);
	
	return 0;
}*/
/*
void set_pointer(char **q); // 함수 선언 

int main(){ // 메인함수 
	
	char *p; // 포인터 선언 
	
	set_pointer(&p); //함수에 포인터 p 전달 
	
	printf("ooo: %s \n", p); // 텍스트 출력 
	
	return 0;
}

void set_pointer(char **q) // 이중포인터 함수, 텍스트 입력 공간 
{
	*q = "All that glisters is not gold";
}*/

/*//파일을 쓰기 모드로 열기 
int main(){
	FILE *fp = NULL;
	fp = fopen("test.txt", "w");
	if(fp == NULL)
		printf("file open failed.\n");
	else
		printf("file open success.\n");
	
	fclose(fp);
	return 0;
} */
/*
int main(){
	FILE *fp = NULL;  
	fp = fopen("sample.txt", "w"); //sample.txt 생성
	
	fclose(fp); // 닫기 
	
	if(remove("sample.txt") == -1) //실패한 경우 -1이 반환 
		printf("cant deleted sample.txt.\n"); 실패했따고 출력 
	
	else // 0이 반환 
		printf("deleted sample.txt.\n"); 성공했따고 출력 
	

	return 0;	
}*/
/* //sample.txt 안에 작성 
int main(){
	FILE *fp = NULL;
	fp = fopen("sample.txt", "w");
	if (fp == NULL)
		printf("failed. \n");
	else
		printf("succeed. \n");
	
	fputc('a', fp);
	fputc('b', fp);
	fputc('c', fp);
	fputc('d', fp);
	
	fclose(fp);
	
	return 0;
}*/
/* //sample.txt 읽기 
int main(){
	FILE *fp = NULL;
	int c;
	
	fp = fopen("sample.txt", "r");
	if (fp == NULL)
		printf("failed. \n");
	else
		printf("success. \n");
	
	printf("\n");
	
	while((c = fgetc(fp)) != EOF){
		
		putchar(c);
	}
	fclose(fp);
	
	
	return 0;
} */
/* //Repeat
int main(){
	FILE *fp = NULL;
	
	fp = fopen("repeat.txt", "w");
	if(fp == NULL)
		printf("failed. \n");
	else
		printf("success. \n");
		
	fputc('f', fp);
	
	return 0;
}*/
/* //파일 복사 
#define SIZE (100)

int main(){
	FILE *fp1, *fp2;
	
	char file1[SIZE], file2[SIZE];
	char buffer[SIZE];
	
	printf("1: ");
	scanf("%s", file1);
	
	printf("2: ");
	scanf("%s", file2);
	
	if( (fp1 = fopen(file1, "r")) == NULL){
		
		fprintf(stderr,"cant open 1 - %s.\n", file1);
		exit(1);
	}
	
	if( (fp2 = fopen(file2, "w")) == NULL){
		
		fprintf(stderr, "cant open 2 - %s.\n", file2);
		exit(2);
	}
	
	while( fgets(buffer, SIZE, fp1) != NULL)
		fputs(buffer, fp2);
	
	fclose(fp1);
	fclose(fp2);
	
	
	return 0;
}*/

/*//ex1
int main(){
	double a;
	double x;
	
	
	printf("input something: ");
	scanf("%lf", &a);
	
	printf("%d\n", (int)a);
	
	x = a - (int)a;
	
	if(x < 0){
		x = -1 *x;
		printf("%.4lf", x);
	}
}*/

int main(){
	
	int fhp;
	int fmp;
	int hp;
	int mp;
	double perh;
	double perm;
	double std;
	
	printf("std: ");
	scanf("%lf", &std);
	
	printf("Full Hp, Mp: ");
	scanf("%d %d", &fhp, &fmp);
	
	printf("Now Hp, Mp: ");
	scanf("%d %d", &hp, &mp);
	
	perh = (double)hp / (double)fhp * 100;
	perm = (double)mp / (double)fmp * 100;
	
	printf("\n\n");
	
	printf("perh : %lf\n", perh);
	printf("perm : %lf", perm);
	
	printf("\n\n");
	
	printf("Hp is lower than %.2lf%%? ", std);
	if(perh < std)
		printf("1");
	else
		printf("0");
	
	printf("\n");
	
	printf("Mp is lower than %.2lf%%? ", std);
	if(perm < std)
		printf("1");
	else
		printf("0");
	
	printf("\n");
	
	printf("Hp, Mp are lower than %.2lf%%? ", std);
	if(perh && perm < std)
		printf("1");
	else
		printf("0");
	
	return 0;
}
